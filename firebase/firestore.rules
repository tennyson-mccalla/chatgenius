rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isParticipant() {
      return isAuthenticated() &&
        request.auth.uid in resource.data.participants;
    }

    function isMessageAuthor(messageData) {
      return request.auth.uid == messageData.user.uid;
    }

    // Existing rules
    match /channels/{channelId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();

      match /messages/{messageId} {
        allow read, write: if isAuthenticated();
      }
    }

    match /presence/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }

    match /directMessages/{dmId} {
      allow read: if isAuthenticated() &&
        request.auth.uid in resource.data.participants;
      allow create: if isAuthenticated() &&
        request.auth.uid in request.resource.data.participants;
      allow update: if isParticipant();

      match /messages/{messageId} {
        allow read, write: if isParticipant();
      }
    }

    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }

    // New rules for threads
    match /threads/{threadId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() &&
        request.auth.uid == resource.data.user.uid;
      allow delete: if isAuthenticated() &&
        request.auth.uid == resource.data.user.uid;

      match /messages/{messageId} {
        allow read: if isAuthenticated();
        allow write: if isAuthenticated();
      }
    }

    // New rules for reactions
    match /reactions/{reactionId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() &&
        request.auth.uid in resource.data.users;
      allow delete: if isAuthenticated() &&
        request.auth.uid in resource.data.users;
    }

    // New rules for files
    match /files/{fileId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() &&
        request.auth.uid == request.resource.data.uploadedBy;
      allow update, delete: if isAuthenticated() &&
        request.auth.uid == resource.data.uploadedBy;
    }
  }
}
